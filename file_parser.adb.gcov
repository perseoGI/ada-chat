        -:    0:Source:/mnt/c/Users/reiva/source/ada-chat/src/utils/file_parser.adb
        -:    1:with Ada.Text_IO;
        -:    2:with Ip_Parser;
        -:    3:with Ada.Exceptions;
        -:    4:with Exceptions;
        -:    5:
        -:    6:package body File_Parser is
        -:    7:    use Ada.Text_IO, Ada.Exceptions, Exceptions;
        -:    8:
        -:    9:
        1:   10:    procedure Parse_Config_File(Ip_Dest: out IPv4.Bounded_String; Port_Dest: out Positive; Port_Src: out Positive) is
        1:   11:        Config_File: File_Type;
        -:   12:        Assert: Boolean;
        -:   13:    begin
        -:   14:        begin
        -:   15:            --Opening of the file and error handling
        1:   16:            Open(   File => Config_File,
        -:   17:            Mode => In_File,
        -:   18:            Name => "adachat.cfg");
        -:   19:        exception
        -:   20:            --when others =>
    =====:   21:            when Name_Error =>
    =====:   22:                Put_Line("adachat.cfg does not exist");
    =====:   23:                raise File_Parser_Exception;
        -:   24:        end;
        -:   25:
        -:   26:        --Main loop of reading
        -:   27:        --while not End_Of_File(Config_File) loop
        3:   28:        for I in 1..3 loop
        3:   29:            declare
        3:   30:                Line : String := Get_Line(Config_File);
        -:   31:            begin
        3:   32:                case I is
        1:   33:                    when 1 =>
        1:   34:                        Assert := Ip_Parser.Is_String_IpV4(Line);
        1:   35:                        if Assert = True then
        1:   36:                            Ip_Dest := To_Bounded_String(Line);
        -:   37:                        else
    #####:   38:                            raise File_Parser_Exception with "Destination IP: " & Line & " is invalid";
        -:   39:                        end if;
        -:   40:
        1:   41:                    when 2 =>
        -:   42:                        begin
        1:   43:                            Port_Dest := Integer'Value(Line);
        -:   44:                        exception
    #####:   45:                            when Constraint_Error =>
    #####:   46:                                raise File_Parser_Exception with "Destination port: " & Line & " is invalid";
        -:   47:                            end;
        1:   48:                    when 3 =>
        -:   49:                        begin
        1:   50:                            Port_Src := Integer'Value(Line);
        -:   51:                        exception
    #####:   52:                            when Constraint_Error =>
    #####:   53:                                raise File_Parser_Exception with "Source port: " & Line & " is invalid";
        -:   54:                            end;
        -:   55:
        3:   56:                end case;
        -:   57:
        3:   58:                if End_Of_File(Config_File) then
        1:   59:                    exit;
        -:   60:                end if;
        6:   61:            end;
        2:   62:        end loop;
        -:   63:
        2:   64:        Put_Line ("Destination IP: " & To_String(Ip_Dest) & ASCII.LF & "Destination port: " & Integer'Image(Port_Dest) & ASCII.LF & "Source port: " & Integer'Image(Port_Src));
        -:   65:        --Ending
        1:   66:        Close(Config_File);
        -:   67:    exception
    #####:   68:        when E: File_Parser_Exception =>
        -:   69:        --when others =>
    #####:   70:            if Is_Open(Config_File) then
    #####:   71:                Close (Config_File);
        -:   72:            end if;
    #####:   73:            raise;
        -:   74:
        1:   75:    end Parse_Config_File;
        -:   76:
        -:   77:end File_Parser;
